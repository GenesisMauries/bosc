{"version":3,"sources":["components/Data/Data.js","App.js","serviceWorker.js","index.js"],"names":["Data","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","loaded","_this2","fetch","catch","error","message","then","response","json","setState","console","log","_this$state","react_default","a","createElement","className","results","map","item","key","id","style","width","src","image","alt","name","status","height","role","Component","App","components_Data_Data","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OA0DeA,2BAnDX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,KAAM,GACNC,QAAQ,GAJHT,mFAOM,IAAAU,EAAAP,KACfQ,MAAM,8CACLC,MAAM,SAACC,GACJH,EAAKI,QAAQD,KAEhBE,KAAK,SAACC,GACP,OAAOA,EAASC,SAEhBF,KAAK,SAACC,GACNN,EAAKQ,SAAS,CACVT,QAAQ,EACRD,KAAMQ,IACVG,QAAQC,IAAIV,EAAKH,0CAId,IAAAc,EACkBlB,KAAKI,MAArBC,EADFa,EACEb,KAEP,OAHKa,EACQZ,OAUHa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAClBjB,EAAKkB,QAAQC,IAAI,SAAAC,GAAI,OAClBN,EAAAC,EAAAC,cAAA,OAAKK,IAAMD,EAAKE,GAAIL,UAAU,OAAOM,MAAO,CAACC,MAAO,UAChDV,EAAAC,EAAAC,cAAA,OAAKS,IAAKL,EAAKM,MAAOT,UAAU,eAAeU,IAAI,SACnDb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcG,EAAKQ,MACjCd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaG,EAAKS,aAbtCf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBM,MAAO,CAACC,MAAO,OAAQM,OAAQ,QAASC,KAAK,UACzEjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,wBA9BGe,cCYJC,0LATX,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACkB,EAAD,cAJYF,cCKEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.3f7abf2e.chunk.js","sourcesContent":["//Dependencias\r\nimport React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n//Varios\r\nimport './Data.css';\r\n\r\nclass Data extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            data: [],\r\n            loaded: false\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://rickandmortyapi.com/api/character/')\r\n        .catch((error)=>{\r\n            this.message(error)\r\n        })\r\n        .then((response) => {\r\n        return response.json()\r\n        })\r\n       .then((response) => {\r\n        this.setState({ \r\n            loaded: true,\r\n            data: response })\r\n        console.log(this.state)\r\n        })\r\n        \r\n    }\r\n  render() {\r\n      const {data, loaded} = this.state\r\n\r\n      if(!loaded){\r\n          return <div className=\"text-center\">\r\n            <div className=\"spinner-border\" style={{width: \"3rem\", height: \"3rem\"}} role=\"status\">\r\n                <span className=\"sr-only\">Cargando...</span>\r\n            </div>\r\n            </div>\r\n        }else{\r\n          return (\r\n                <div className=\"container\">\r\n            {data.results.map(item=>(\r\n                <div key= {item.id} className=\"card\" style={{width: \"16rem\"}}>\r\n                    <img src={item.image} className=\"card-img-top\" alt=\"foto\"/>\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{item.name}</h5>\r\n                        <p className=\"card-text\">{item.status}</p>\r\n                {/* <a href=\"#\" className=\"btn btn-primary\"></a> */}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Data;\r\n","//Dependencias\nimport React, { Component } from 'react';\n//\nimport Data from './components/Data/Data'\n//Estilos\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Data/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}